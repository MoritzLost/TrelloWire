<?php
namespace ProcessWire;

use ProcessWire\TrelloWire\TrelloWireApi;
use Processwire\TrelloWireConfig;

class TrelloWire extends Wire implements Module
{
    public const LOG_NAME = 'trello-wire';

    public const CREATE_NEVER = 'never';
    public const CREATE_ON_ADDED = 'added';
    public const CREATE_ON_PUBLISHED = 'published';

    protected $api;

    public static function getModuleInfo()
    {
        return [
            'title' => __('Trello Wire'),
            'summary' => __('A module providing a bridge to trello to create cards based on pages.'),
            'author' => "Moritz L'Hoest",
            'version' => '0.1.0',
            'icon' => 'trello',
            'autoload' => true,
            'requires' => [
                'PHP>=7.1',
            ],
            'installs' => [
                'TrelloWireCard',
            ],
        ];
    }

    public function __construct()
    {
        // add namespace to autoload module classes
        $namespace = 'ProcessWire\\TrelloWire';
        $classLoader = $this->wire('classLoader');
        if (!$classLoader->hasNamespace($namespace)) {
            $srcPath = $this->wire('config')->paths->get($this) . 'src/';
            $classLoader->addNamespace($namespace, $srcPath);
        }
    }

    public function init()
    {
        // setup card creation hook
        // @TODO: remove duplication, move from anonymous function to method
        switch ($this->CardCreationTrigger) {
            case self::CREATE_ON_ADDED:
                $this->addHookAfter('Pages::added', [$this, 'cardCreationHook']);
            break;
            case self::CREATE_ON_PUBLISHED:
                $this->addHookAfter('Pages::published', [$this, 'cardCreationHook']);
                break;
        }
    }

    public function api()
    {
        if (!$this->api) {
            $this->api = new TrelloWireApi($this->ApiKey, $this->ApiToken);
        }
        return $this->api;
    }

    protected function cardCreationHook(HookEvent $e) {
        $page = $e->arguments(0);
        $card = $this->setupCardForPage($page);
        $this->postCardToTrello($card, $this->TargetList ?: '');
        // @TODO: check result, log message
    }

    public function ___setupCardForPage(Page $page): TrelloWireCard
    {
        $TrelloWireCard = $this->modules->get('TrelloWireCard');
        $defaultSettings = (new TrelloWireConfig())->getDefaults();
        $titleField = !empty($this->CardTitle) ? $this->CardTitle : $defaultSettings['CardTitle'];
        $TrelloWireCard->setTitle($page->getText($titleField, true, false));
        if (!empty($this->CardBody)) {
            $TrelloWireCard->setBody($page->getMarkup($this->CardBody));
        }
        return $TrelloWireCard;
    }

    public function ___postCardToTrello(TrelloWireCard $card, string $idList): bool
    {
        // @TODO: post card, return success or failure
        if (!$idList) return false;
        return $this->api()->postCard($idList, $card->title, $card->body);
    }
}
