<?php
namespace ProcessWire;

use ProcessWire\TrelloWire\TrelloWireApi;

class TrelloWire extends Wire implements Module
{
    public const CARD_REFERENCE_KEY = 'TrelloWireCardId';

    public const CREATE_NEVER = 'never';
    public const CREATE_ON_ADDED = 'added';
    public const CREATE_ON_PUBLISHED = 'published';

    public const STATUS_CHANGE_NO_ACTION = 'nothing';
    public const STATUS_CHANGE_MOVE = 'move';
    public const STATUS_CHANGE_ARCHIVE = 'archive';
    public const STATUS_CHANGE_DELETE = 'delete';

    public const LOG_NAME = 'trello-wire';

    protected $api;

    public static function getModuleInfo()
    {
        return [
            'title' => __('Trello Wire'),
            'summary' => __('A module providing a bridge to trello to create cards based on pages.'),
            'author' => "Moritz L'Hoest",
            'version' => '0.1.0',
            'icon' => 'trello',
            'autoload' => true,
            'requires' => [
                'ProcessWire>=3.0.133',
                'PHP>=7.2',
            ],
            'installs' => [
                'TrelloWireCard',
            ],
        ];
    }

    public function __construct()
    {
        // add namespace to autoload module classes
        $namespace = 'ProcessWire\\TrelloWire';
        $classLoader = $this->wire('classLoader');
        if (!$classLoader->hasNamespace($namespace)) {
            $srcPath = $this->wire('config')->paths->get($this) . 'src/';
            $classLoader->addNamespace($namespace, $srcPath);
        }
    }

    public function init()
    {
        // @TODO: global switch to turn off all automatic module operations
        // setup page creation hook
        switch ($this->CardCreationTrigger) {
            case self::CREATE_ON_ADDED:
                $this->addHookAfter('Pages::added', $this, 'cardCreationHook');
                break;
            case self::CREATE_ON_PUBLISHED:
                $this->addHookAfter('Pages::published', $this, 'cardCreationHook');
                break;
        }
        // setup page update hooks
        if ($this->CardUpdate) {
            // @TODO: dont fire this if pages::published has already fired
            // $this->addHookAfter('Pages::saved', $this, 'cardUpdateHook');
        }
    }

    public function api()
    {
        if (!$this->api) {
            $this->api = new TrelloWireApi($this->ApiKey, $this->ApiToken);
        }
        return $this->api;
    }

    /**
     * This hook handles setting up and posting a new card to Trello for newly
     * created or published pages.
     *
     * @param HookEvent $e
     * @return void
     */
    protected function cardCreationHook(HookEvent $e) {
        $page = $e->arguments(0);
        if (!in_array($page->template->name, $this->TrelloWireTemplates)) return;
        $card = $this->createCardFromPage($page);
        $response = $this->postCardToTrello($card);
        if (!$response) {
            return $page->error($this->_('An error occured while attempting to create a new card on Trello.'));
        }
        $page->wire()->message($this->_('Successfully created a new Trello card for this page!'));
        // save the card ID to the page meta data so it can be updated later
        $page->meta(self::CARD_REFERENCE_KEY, $response->id);
        $checklistItems = $this->getDefaultChecklistItems();
        if (!empty($checklistItems)) {
            $checklistTitle = $this->getDefaultChecklistTitle();
            $checklist = $this->api()->addChecklistToCard($response->id, $checklistTitle);
            foreach ($checklistItems as $item) {
                $this->api()->addItemToChecklist($checklist->id, $item);
            }
        }
    }

    /**
     * This hook handles updating the Trello card whenever a page is updated (saved).
     *
     * @param HookEvent $e
     * @return void
     */
    protected function cardUpdateHook(HookEvent $e) {
        $page = $e->arguments(0);
        if (!in_array($page->template->name, $this->TrelloWireTemplates)) return;
        $card = $this->createCardFromPage($page);
        $response = $this->updateCardOnTrello($card);
        if (!$response) {
            $page->message($this->_('The card associated with this page could not be updated. It may have been deleted manually.'));
        } else {
            $page->wire()->message($this->_('Successfully updated the Trello card associated with this page.'));
        }
    }

    /**
     * Set up a new TrelloWireCard based on the passed page using the module settings.
     * Hook after this if you want to modify the card's attributes before it is
     * posted to Trello.
     *
     * @param Page $page        The page this card will belong to.
     * @return TrelloWireCard   The card object with values based on the page.
     */
    public function ___createCardFromPage(Page $page): TrelloWireCard
    {
        $TrelloWireCard = $this->modules->get('TrelloWireCard');
        $TrelloWireCard->setList($this->TargetList);
        $defaultSettings = (new TrelloWireConfig())->getDefaults();
        $titleField = !empty($this->CardTitle) ? $this->CardTitle : $defaultSettings['CardTitle'];
        $TrelloWireCard->setTitle($page->getText($titleField, true, false));
        if (!empty($this->CardBody)) {
            $TrelloWireCard->setBody($page->getMarkup($this->CardBody));
        }
        // for existing cards (card id stored in page settings), restore the id
        $existingCardId = $page->meta(self::CARD_REFERENCE_KEY);
        if ($existingCardId) {
            $TrelloWireCard->setId($existingCardId);
        }
        if (!empty($this->CardLabels)) {
            $TrelloWireCard->setLabels($this->CardLabels);
        }
        return $TrelloWireCard;
    }

    /**
     * Create a new Trello card through the API based on a TrelloWireCard instance.
     *
     * @param TrelloWireCard $card  The card with the values to post to Trello.
     * @return bool|object          Returns the card object returned from the API, or false on failure.
     */
    public function ___postCardToTrello(TrelloWireCard $card)
    {
        if (!$card->list) return false;
        return $this->api()->postCard($card->list, $card->title, $card->body, array_filter([
            'idLabels' => $card->labels ? implode(',', $card->labels) : null,
        ]));
    }

    /**
     * Update an existing Trello card with values from the TrelloWireCard instance.
     *
     * @param TrelloWireCard $card
     * @return void
     */
    public function ___updateCardOnTrello(TrelloWireCard $card)
    {
        if (!$card->id) return false;
        return $this->api()->updateCard($card->id, $card->title, $card->body);
    }

    public function ___getDefaultChecklistTitle(): string
    {
        return $this->CardChecklistTitle ?: (new TrelloWireConfig())->getDefaults()['CardChecklistTitle'];
    }

    public function ___getDefaultChecklistItems(): array
    {
        if (!$this->CardChecklistItems) return [];
        return array_filter(
            preg_split('/[\n\r]+/', $this->CardChecklistItems),
            function ($item) {
                return !empty($item);
            }
        );
    }
}
